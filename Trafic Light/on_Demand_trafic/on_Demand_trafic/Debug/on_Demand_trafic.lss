
on_Demand_trafic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000708  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000077c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001353  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f1  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0f  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  0000321c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6f  00000000  00000000  00003765  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
  74:	0c 94 82 03 	jmp	0x704	; 0x704 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:


void App_init(void)
{
	//cars led
		LED_init(LED_RED_PORT, LED_RED_PIN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
		LED_init(LED_YELLOW_PORT, LED_YELLOW_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
		LED_init(LED_GREEN_PORT, LED_GREEN_PIN);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
		
	//pedestrian led
			LED_init(LED_P_RED_PORT, LED_P_RED_PIN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
			LED_init(LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
			LED_init(LED_P_GREEN_PORT, LED_P_GREEN_PIN);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
			
	//button init
			BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 3c 01 	call	0x278	; 0x278 <BUTTON_init>
			
			interupts_init();
  b4:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <interupts_init>
			Timer0_init_normal();
  b8:	0e 94 04 03 	call	0x608	; 0x608 <Timer0_init_normal>
  bc:	08 95       	ret

000000be <TurnLEDoff>:
	/*function to turn off all leds*/


void TurnLEDoff(void)
{
	LED_off(LED_RED_PORT, LED_RED_PIN);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
	LED_off(LED_YELLOW_PORT, LED_YELLOW_PIN);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
	LED_off(LED_GREEN_PORT, LED_GREEN_PIN);
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	81 e4       	ldi	r24, 0x41	; 65
  d2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
	// turn off all pedestrian's LEDs
	LED_off(LED_P_RED_PORT, LED_P_RED_PIN);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	82 e4       	ldi	r24, 0x42	; 66
  da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
	LED_off(LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
	LED_off(LED_P_GREEN_PORT, LED_P_GREEN_PIN);
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
  ee:	08 95       	ret

000000f0 <App_start>:
{
	while(1)
	{
		
		
		if(mode == NORMAL)
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	81 11       	cpse	r24, r1
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <App_start>
				4. blink cars' Yellow LED and turn on the pedestrians' Red LED
			
			*/
			
			//Turn off all leds
			TurnLEDoff();
  f8:	0e 94 5f 00 	call	0xbe	; 0xbe <TurnLEDoff>
			//switch car led to red and pedestrian to green
			LED_on(LED_GREEN_PORT,LED_GREEN_PIN);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
			LED_on(LED_P_RED_PORT,LED_P_RED_PIN);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	82 e4       	ldi	r24, 0x42	; 66
 108:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
			delay_5s();
 10c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <delay_5s>
			TurnLEDoff();
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <TurnLEDoff>
			flag_G = 1;
 114:	c1 e0       	ldi	r28, 0x01	; 1
 116:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <flag_G>
			
			toggle_2_LEDs_5s(LED_YELLOW_PORT, LED_YELLOW_PIN,LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	42 e4       	ldi	r20, 0x42	; 66
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 5e 01 	call	0x2bc	; 0x2bc <toggle_2_LEDs_5s>
			flag_Y = 1;
 126:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <flag_Y>
			LED_off(LED_YELLOW_PORT, LED_YELLOW_PIN);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
			LED_off(LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	82 e4       	ldi	r24, 0x42	; 66
 136:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
			LED_on(LED_RED_PORT,LED_RED_PIN);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
			flag_R = 1;
 142:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <flag_R>
			LED_on(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
			delay_5s();
 14e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <delay_5s>
			LED_off(LED_RED_PORT,LED_RED_PIN);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
			LED_off(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
			toggle_2_LEDs_5s(LED_YELLOW_PORT, LED_YELLOW_PIN,LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	42 e4       	ldi	r20, 0x42	; 66
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <toggle_2_LEDs_5s>
 16e:	c0 cf       	rjmp	.-128    	; 0xf0 <App_start>

00000170 <__vector_1>:
		
		} //end of while 1
}  
			
ISR(EXT_INT_0)
		{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
			
			
		
			if(flag_R == 1)
 192:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <flag_R>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	11 f5       	brne	.+68     	; 0x1de <__vector_1+0x6e>
				1. Will turn off all leds
				2. Red led for the cars and the green led for the peds will be on for 5 sec the peds pass the road 
				3. turn off both leds and the yelllow LED will blink for 5 sec
				4. turn off all leds and continue to normal mode */
							
				TurnLEDoff();
 19a:	0e 94 5f 00 	call	0xbe	; 0xbe <TurnLEDoff>
				LED_on(LED_RED_PORT,LED_RED_PIN);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
				LED_on(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
				delay_5s();
 1ae:	0e 94 53 03 	call	0x6a6	; 0x6a6 <delay_5s>
				LED_off(LED_RED_PORT,LED_RED_PIN);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
				LED_off(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
				toggle_2_LEDs_5s(LED_YELLOW_PORT, LED_YELLOW_PIN,LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	42 e4       	ldi	r20, 0x42	; 66
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	0e 94 5e 01 	call	0x2bc	; 0x2bc <toggle_2_LEDs_5s>
				LED_off(LED_YELLOW_PORT, LED_YELLOW_PIN);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
				LED_off(LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					4.Turn on the car red led and the peds green LED on for five seconds to let the peds to pass
					5.blink the yellow for 5 sec then go back to normal mode
					*/
					
	
			 if (flag_G == 1 || flag_Y == 1 )
 1de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag_G>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	21 f0       	breq	.+8      	; 0x1ee <__vector_1+0x7e>
 1e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <flag_Y>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	a1 f5       	brne	.+104    	; 0x256 <__vector_1+0xe6>
				{
					
	
					TurnLEDoff();
 1ee:	0e 94 5f 00 	call	0xbe	; 0xbe <TurnLEDoff>
									
					LED_on(LED_P_RED_PORT,LED_P_RED_PIN);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
					delay_5s();
 1fa:	0e 94 53 03 	call	0x6a6	; 0x6a6 <delay_5s>
					LED_off(LED_P_RED_PORT,LED_P_RED_PIN);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	82 e4       	ldi	r24, 0x42	; 66
 202:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					toggle_2_LEDs_5s(LED_YELLOW_PORT, LED_YELLOW_PIN,LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	42 e4       	ldi	r20, 0x42	; 66
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e4       	ldi	r24, 0x41	; 65
 20e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <toggle_2_LEDs_5s>
					LED_off(LED_YELLOW_PORT, LED_YELLOW_PIN);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					LED_off(LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					
					LED_on(LED_RED_PORT,LED_RED_PIN);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
					LED_on(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	0e 94 4a 01 	call	0x294	; 0x294 <LED_on>
					delay_5s();
 232:	0e 94 53 03 	call	0x6a6	; 0x6a6 <delay_5s>
					LED_off(LED_RED_PORT,LED_RED_PIN);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					LED_off(LED_P_GREEN_PORT,LED_P_GREEN_PIN);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LED_off>
					toggle_2_LEDs_5s(LED_YELLOW_PORT, LED_YELLOW_PIN,LED_P_YELLOW_PORT, LED_P_YELLOW_PIN);
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	42 e4       	ldi	r20, 0x42	; 66
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <toggle_2_LEDs_5s>
					
					TurnLEDoff();
 252:	0e 94 5f 00 	call	0xbe	; 0xbe <TurnLEDoff>
					//go to normal mode
				}
						
		}//end ISR
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <BUTTON_init>:
#include "Button.h"


//initialize
void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
 278:	98 2f       	mov	r25, r24
 27a:	86 2f       	mov	r24, r22
	DIO_init(buttonPin,buttonPort,IN);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	69 2f       	mov	r22, r25
 280:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_init>
 284:	08 95       	ret

00000286 <LED_init>:
		{
			LED_toggle(ledPort, ledPin);
		}
		overflowCounter++;
	}
} 
 286:	98 2f       	mov	r25, r24
 288:	86 2f       	mov	r24, r22
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	69 2f       	mov	r22, r25
 28e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_init>
 292:	08 95       	ret

00000294 <LED_on>:
 294:	98 2f       	mov	r25, r24
 296:	86 2f       	mov	r24, r22
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	69 2f       	mov	r22, r25
 29c:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 2a0:	08 95       	ret

000002a2 <LED_off>:
 2a2:	98 2f       	mov	r25, r24
 2a4:	86 2f       	mov	r24, r22
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	69 2f       	mov	r22, r25
 2aa:	0e 94 2f 02 	call	0x45e	; 0x45e <DIO_write>
 2ae:	08 95       	ret

000002b0 <LED_toggle>:
 2b0:	98 2f       	mov	r25, r24
 2b2:	86 2f       	mov	r24, r22
 2b4:	69 2f       	mov	r22, r25
 2b6:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_toggle>
 2ba:	08 95       	ret

000002bc <toggle_2_LEDs_5s>:

void toggle_2_LEDs_5s(uint8_t ledPort1, uint8_t ledPin1, uint8_t ledPort2, uint8_t ledPin2)
{
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	08 2f       	mov	r16, r24
 2ce:	16 2f       	mov	r17, r22
 2d0:	d4 2f       	mov	r29, r20
 2d2:	c2 2f       	mov	r28, r18
		Description:
		make a delay for 5 seconds, and blink two LEDs during this duration
	*/
	uint32_t overflowCounter = 0;

	TCCR0 |= (1 << 2); // set pin2, 256 pre-scalar
 2d4:	83 b7       	in	r24, 0x33	; 51
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	83 bf       	out	0x33, r24	; 51
{
	/*
		Description:
		make a delay for 5 seconds, and blink two LEDs during this duration
	*/
	uint32_t overflowCounter = 0;
 2da:	c1 2c       	mov	r12, r1
 2dc:	d1 2c       	mov	r13, r1
 2de:	76 01       	movw	r14, r12

	TCCR0 |= (1 << 2); // set pin2, 256 pre-scalar
	// Repeated number of overflow times
	while (overflowCounter < 77)
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <toggle_2_LEDs_5s+0x64>
	{
		// wait the overflow flat to be set
		while ((TIFR & (1 << 0)) == 0)
 2e2:	08 b6       	in	r0, 0x38	; 56
 2e4:	00 fe       	sbrs	r0, 0
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <toggle_2_LEDs_5s+0x26>
			;
		// Clear the overflow flag
		TIFR |= (1 << 0);
 2e8:	88 b7       	in	r24, 0x38	; 56
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	88 bf       	out	0x38, r24	; 56
		if (overflowCounter % 6 == 0)
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	26 e0       	ldi	r18, 0x06	; 6
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__udivmodsi4>
 2fe:	67 2b       	or	r22, r23
 300:	68 2b       	or	r22, r24
 302:	69 2b       	or	r22, r25
 304:	41 f4       	brne	.+16     	; 0x316 <toggle_2_LEDs_5s+0x5a>
		{
			LED_toggle(ledPort1, ledPin1);
 306:	61 2f       	mov	r22, r17
 308:	80 2f       	mov	r24, r16
 30a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_toggle>
			LED_toggle(ledPort2, ledPin2);
 30e:	6c 2f       	mov	r22, r28
 310:	8d 2f       	mov	r24, r29
 312:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_toggle>
		}
		overflowCounter++;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	c8 1a       	sub	r12, r24
 31a:	d8 0a       	sbc	r13, r24
 31c:	e8 0a       	sbc	r14, r24
 31e:	f8 0a       	sbc	r15, r24
	*/
	uint32_t overflowCounter = 0;

	TCCR0 |= (1 << 2); // set pin2, 256 pre-scalar
	// Repeated number of overflow times
	while (overflowCounter < 77)
 320:	8d e4       	ldi	r24, 0x4D	; 77
 322:	c8 16       	cp	r12, r24
 324:	d1 04       	cpc	r13, r1
 326:	e1 04       	cpc	r14, r1
 328:	f1 04       	cpc	r15, r1
 32a:	d8 f2       	brcs	.-74     	; 0x2e2 <toggle_2_LEDs_5s+0x26>
			LED_toggle(ledPort1, ledPin1);
			LED_toggle(ledPort2, ledPin2);
		}
		overflowCounter++;
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	08 95       	ret

0000033e <main>:
	
	
	
    while (1) 
    {
	App_init();
 33e:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	App_start();
 342:	0e 94 78 00 	call	0xf0	; 0xf0 <App_start>
 346:	fb cf       	rjmp	.-10     	; 0x33e <main>

00000348 <DIO_init>:

#include "DIO.h"

void DIO_init(uint8_t pinNumber, uint8_t portNumber , uint8_t direction) // Initialize dio direction
{
	switch(portNumber)
 348:	62 34       	cpi	r22, 0x42	; 66
 34a:	59 f1       	breq	.+86     	; 0x3a2 <DIO_init+0x5a>
 34c:	18 f4       	brcc	.+6      	; 0x354 <DIO_init+0xc>
 34e:	61 34       	cpi	r22, 0x41	; 65
 350:	41 f0       	breq	.+16     	; 0x362 <DIO_init+0x1a>
 352:	08 95       	ret
 354:	63 34       	cpi	r22, 0x43	; 67
 356:	09 f4       	brne	.+2      	; 0x35a <DIO_init+0x12>
 358:	44 c0       	rjmp	.+136    	; 0x3e2 <DIO_init+0x9a>
 35a:	64 34       	cpi	r22, 0x44	; 68
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_init+0x18>
 35e:	60 c0       	rjmp	.+192    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 360:	08 95       	ret
	{
		
		
		case PORT_A :
		if (direction == IN)
 362:	41 11       	cpse	r20, r1
 364:	0e c0       	rjmp	.+28     	; 0x382 <DIO_init+0x3a>

		{

			DDRA &= ~(1<<pinNumber);
 366:	4a b3       	in	r20, 0x1a	; 26
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_init+0x2c>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_init+0x28>
 378:	cb 01       	movw	r24, r22
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8a bb       	out	0x1a, r24	; 26
 380:	08 95       	ret
		}
		
		else if (direction == OUT)
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_init+0x40>
 386:	6a c0       	rjmp	.+212    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			DDRA |= (1<<pinNumber);
 388:	4a b3       	in	r20, 0x1a	; 26
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0x4e>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0x4a>
 39a:	cb 01       	movw	r24, r22
 39c:	84 2b       	or	r24, r20
 39e:	8a bb       	out	0x1a, r24	; 26
 3a0:	08 95       	ret
		}
		break;
		
		case PORT_B :

		if (direction == IN)
 3a2:	41 11       	cpse	r20, r1
 3a4:	0e c0       	rjmp	.+28     	; 0x3c2 <DIO_init+0x7a>

		{

			DDRB &= ~(1<<pinNumber);
 3a6:	47 b3       	in	r20, 0x17	; 23
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	b9 01       	movw	r22, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_init+0x6c>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_init+0x68>
 3b8:	cb 01       	movw	r24, r22
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
		}
		
		else if (direction == OUT)
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_init+0x80>
 3c6:	4a c0       	rjmp	.+148    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			DDRB |= (1<<pinNumber);
 3c8:	47 b3       	in	r20, 0x17	; 23
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_init+0x8e>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_init+0x8a>
 3da:	cb 01       	movw	r24, r22
 3dc:	84 2b       	or	r24, r20
 3de:	87 bb       	out	0x17, r24	; 23
 3e0:	08 95       	ret
		}
		break;
		
		case PORT_C :

		if (direction == IN)
 3e2:	41 11       	cpse	r20, r1
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>

		{

			DDRC &= ~(1<<pinNumber);
 3e6:	44 b3       	in	r20, 0x14	; 20
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_init+0xac>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_init+0xa8>
 3f8:	cb 01       	movw	r24, r22
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	84 bb       	out	0x14, r24	; 20
 400:	08 95       	ret
		}
		
		else if (direction == OUT)
 402:	41 30       	cpi	r20, 0x01	; 1
 404:	59 f5       	brne	.+86     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			DDRC |= (1<<pinNumber);
 406:	44 b3       	in	r20, 0x14	; 20
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	84 2b       	or	r24, r20
 41c:	84 bb       	out	0x14, r24	; 20
 41e:	08 95       	ret
		}
		break;
		
		case PORT_D :

		if (direction == IN)
 420:	41 11       	cpse	r20, r1
 422:	0e c0       	rjmp	.+28     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>

		{

			DDRD &= ~(1<<pinNumber);
 424:	41 b3       	in	r20, 0x11	; 17
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	81 bb       	out	0x11, r24	; 17
 43e:	08 95       	ret
		}
		
		else if (direction == OUT)
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	61 f4       	brne	.+24     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			DDRD |= (1<<pinNumber);
 444:	41 b3       	in	r20, 0x11	; 17
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	84 2b       	or	r24, r20
 45a:	81 bb       	out	0x11, r24	; 17
 45c:	08 95       	ret

0000045e <DIO_write>:



void DIO_write(uint8_t pinNumber, uint8_t portNumber , uint8_t value)
{
	switch(portNumber)
 45e:	62 34       	cpi	r22, 0x42	; 66
 460:	59 f1       	breq	.+86     	; 0x4b8 <DIO_write+0x5a>
 462:	18 f4       	brcc	.+6      	; 0x46a <DIO_write+0xc>
 464:	61 34       	cpi	r22, 0x41	; 65
 466:	41 f0       	breq	.+16     	; 0x478 <DIO_write+0x1a>
 468:	08 95       	ret
 46a:	63 34       	cpi	r22, 0x43	; 67
 46c:	09 f4       	brne	.+2      	; 0x470 <DIO_write+0x12>
 46e:	44 c0       	rjmp	.+136    	; 0x4f8 <DIO_write+0x9a>
 470:	64 34       	cpi	r22, 0x44	; 68
 472:	09 f4       	brne	.+2      	; 0x476 <DIO_write+0x18>
 474:	60 c0       	rjmp	.+192    	; 0x536 <DIO_write+0xd8>
 476:	08 95       	ret
	{
		
		
		case PORT_A :
		if (value == LOW)
 478:	41 11       	cpse	r20, r1
 47a:	0e c0       	rjmp	.+28     	; 0x498 <DIO_write+0x3a>

		{

			PORTA &= ~(1<<pinNumber); // write 0
 47c:	4b b3       	in	r20, 0x1b	; 27
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_write+0x2c>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_write+0x28>
 48e:	cb 01       	movw	r24, r22
 490:	80 95       	com	r24
 492:	84 23       	and	r24, r20
 494:	8b bb       	out	0x1b, r24	; 27
 496:	08 95       	ret
		}
		
		else if (value == HIGH)
 498:	41 30       	cpi	r20, 0x01	; 1
 49a:	09 f0       	breq	.+2      	; 0x49e <DIO_write+0x40>
 49c:	6a c0       	rjmp	.+212    	; 0x572 <DIO_write+0x114>
		{
			PORTA |= (1<<pinNumber); // write 1
 49e:	4b b3       	in	r20, 0x1b	; 27
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_write+0x4e>
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_write+0x4a>
 4b0:	cb 01       	movw	r24, r22
 4b2:	84 2b       	or	r24, r20
 4b4:	8b bb       	out	0x1b, r24	; 27
 4b6:	08 95       	ret
		}
		break;
		
		case PORT_B :

		if (value == LOW)
 4b8:	41 11       	cpse	r20, r1
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <DIO_write+0x7a>

		{

			PORTB &= ~(1<<pinNumber);  //write 0
 4bc:	48 b3       	in	r20, 0x18	; 24
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_write+0x6c>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_write+0x68>
 4ce:	cb 01       	movw	r24, r22
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	88 bb       	out	0x18, r24	; 24
 4d6:	08 95       	ret
		}
		
		else if (value == HIGH)
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_write+0x80>
 4dc:	4a c0       	rjmp	.+148    	; 0x572 <DIO_write+0x114>
		{
			PORTB |= (1<<pinNumber);  //write 1
 4de:	48 b3       	in	r20, 0x18	; 24
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0x8e>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x8a>
 4f0:	cb 01       	movw	r24, r22
 4f2:	84 2b       	or	r24, r20
 4f4:	88 bb       	out	0x18, r24	; 24
 4f6:	08 95       	ret
		}
		break;
		
				case PORT_C :

		if (value == LOW)
 4f8:	41 11       	cpse	r20, r1
 4fa:	0e c0       	rjmp	.+28     	; 0x518 <DIO_write+0xba>

		{

			PORTC &= ~(1<<pinNumber);  //write 0
 4fc:	45 b3       	in	r20, 0x15	; 21
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	b9 01       	movw	r22, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_write+0xac>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_write+0xa8>
 50e:	cb 01       	movw	r24, r22
 510:	80 95       	com	r24
 512:	84 23       	and	r24, r20
 514:	85 bb       	out	0x15, r24	; 21
 516:	08 95       	ret
		}
		
		else if (value == HIGH)
 518:	41 30       	cpi	r20, 0x01	; 1
 51a:	59 f5       	brne	.+86     	; 0x572 <DIO_write+0x114>
		{
			PORTC |= (1<<pinNumber);  //write 1
 51c:	45 b3       	in	r20, 0x15	; 21
 51e:	21 e0       	ldi	r18, 0x01	; 1
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	b9 01       	movw	r22, r18
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0xcc>
 526:	66 0f       	add	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	8a 95       	dec	r24
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0xc8>
 52e:	cb 01       	movw	r24, r22
 530:	84 2b       	or	r24, r20
 532:	85 bb       	out	0x15, r24	; 21
 534:	08 95       	ret
		}
		break;
		
				case PORT_D :

		if (value == LOW)
 536:	41 11       	cpse	r20, r1
 538:	0e c0       	rjmp	.+28     	; 0x556 <DIO_write+0xf8>

		{

			PORTD &= ~(1<<pinNumber);  //write 0
 53a:	42 b3       	in	r20, 0x12	; 18
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_write+0xea>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_write+0xe6>
 54c:	cb 01       	movw	r24, r22
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret
		}
		
		else if (value == HIGH)
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	61 f4       	brne	.+24     	; 0x572 <DIO_write+0x114>
		{
			PORTD |= (1<<pinNumber);  //write 1
 55a:	42 b3       	in	r20, 0x12	; 18
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_write+0x10a>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_write+0x106>
 56c:	cb 01       	movw	r24, r22
 56e:	84 2b       	or	r24, r20
 570:	82 bb       	out	0x12, r24	; 18
 572:	08 95       	ret

00000574 <DIO_toggle>:
}


void DIO_toggle(uint8_t pinNumber, uint8_t portNumber)
{
		switch(portNumber)
 574:	62 34       	cpi	r22, 0x42	; 66
 576:	b1 f0       	breq	.+44     	; 0x5a4 <DIO_toggle+0x30>
 578:	18 f4       	brcc	.+6      	; 0x580 <DIO_toggle+0xc>
 57a:	61 34       	cpi	r22, 0x41	; 65
 57c:	31 f0       	breq	.+12     	; 0x58a <DIO_toggle+0x16>
 57e:	08 95       	ret
 580:	63 34       	cpi	r22, 0x43	; 67
 582:	e9 f0       	breq	.+58     	; 0x5be <DIO_toggle+0x4a>
 584:	64 34       	cpi	r22, 0x44	; 68
 586:	41 f1       	breq	.+80     	; 0x5d8 <DIO_toggle+0x64>
 588:	08 95       	ret
	{
		
		
		case PORT_A :
		
			PORTA ^= (1<<pinNumber); // write 1
 58a:	4b b3       	in	r20, 0x1b	; 27
 58c:	21 e0       	ldi	r18, 0x01	; 1
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	b9 01       	movw	r22, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_toggle+0x24>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_toggle+0x20>
 59c:	cb 01       	movw	r24, r22
 59e:	84 27       	eor	r24, r20
 5a0:	8b bb       	out	0x1b, r24	; 27
		
		break;
 5a2:	08 95       	ret
		
		case PORT_B :

		
			PORTB ^= (1<<pinNumber);  //write 1
 5a4:	48 b3       	in	r20, 0x18	; 24
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_toggle+0x3e>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_toggle+0x3a>
 5b6:	cb 01       	movw	r24, r22
 5b8:	84 27       	eor	r24, r20
 5ba:	88 bb       	out	0x18, r24	; 24
		
		break;
 5bc:	08 95       	ret
		
		case PORT_C :

		PORTC ^= (1<<pinNumber);  //write 1
 5be:	45 b3       	in	r20, 0x15	; 21
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	b9 01       	movw	r22, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_toggle+0x58>
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	8a 95       	dec	r24
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_toggle+0x54>
 5d0:	cb 01       	movw	r24, r22
 5d2:	84 27       	eor	r24, r20
 5d4:	85 bb       	out	0x15, r24	; 21
	
		break;
 5d6:	08 95       	ret
		
		case PORT_D :

			PORTD ^= (1<<pinNumber);  //write 1
 5d8:	42 b3       	in	r20, 0x12	; 18
 5da:	21 e0       	ldi	r18, 0x01	; 1
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	b9 01       	movw	r22, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_toggle+0x72>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	8a 95       	dec	r24
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_toggle+0x6e>
 5ea:	cb 01       	movw	r24, r22
 5ec:	84 27       	eor	r24, r20
 5ee:	82 bb       	out	0x12, r24	; 18
 5f0:	08 95       	ret

000005f2 <interupts_init>:

#include "INTERUPTS.h"

void interupts_init()
{
	sei();
 5f2:	78 94       	sei

	//Choosing the external interrupt sense (sense on the rising edge)
	MCUCR |= (1<<0) | (1<<1);
 5f4:	85 b7       	in	r24, 0x35	; 53
 5f6:	83 60       	ori	r24, 0x03	; 3
 5f8:	85 bf       	out	0x35, r24	; 53
	//Enable External interrupt 0(INT0)
	GICR |= (1<<6);
 5fa:	8b b7       	in	r24, 0x3b	; 59
 5fc:	80 64       	ori	r24, 0x40	; 64
 5fe:	8b bf       	out	0x3b, r24	; 59

	SREG |= (1<<7);	
 600:	8f b7       	in	r24, 0x3f	; 63
 602:	80 68       	ori	r24, 0x80	; 128
 604:	8f bf       	out	0x3f, r24	; 63
 606:	08 95       	ret

00000608 <Timer0_init_normal>:

#include "Timer.h"
uint32_t overflowCounter = 0;
void Timer0_init_normal()
{
	TCCR0 = 0x00; //Normal mode
 608:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; //set timer 0
 60a:	12 be       	out	0x32, r1	; 50
 60c:	08 95       	ret

0000060e <TIMER0_start>:
}


void TIMER0_start(uint32_t preScalar,uint32_t number_of_overflow)
{
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	89 01       	movw	r16, r18
 614:	9a 01       	movw	r18, r20
    uint32_t overflowCounter = 0;
	
    switch (preScalar)
 616:	60 34       	cpi	r22, 0x40	; 64
 618:	71 05       	cpc	r23, r1
 61a:	81 05       	cpc	r24, r1
 61c:	91 05       	cpc	r25, r1
 61e:	01 f1       	breq	.+64     	; 0x660 <TIMER0_start+0x52>
 620:	58 f4       	brcc	.+22     	; 0x638 <TIMER0_start+0x2a>
 622:	61 30       	cpi	r22, 0x01	; 1
 624:	71 05       	cpc	r23, r1
 626:	81 05       	cpc	r24, r1
 628:	91 05       	cpc	r25, r1
 62a:	91 f0       	breq	.+36     	; 0x650 <TIMER0_start+0x42>
 62c:	68 30       	cpi	r22, 0x08	; 8
 62e:	71 05       	cpc	r23, r1
 630:	81 05       	cpc	r24, r1
 632:	91 05       	cpc	r25, r1
 634:	89 f0       	breq	.+34     	; 0x658 <TIMER0_start+0x4a>
 636:	17 c0       	rjmp	.+46     	; 0x666 <TIMER0_start+0x58>
 638:	61 15       	cp	r22, r1
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	74 07       	cpc	r23, r20
 63e:	81 05       	cpc	r24, r1
 640:	91 05       	cpc	r25, r1
 642:	a9 f0       	breq	.+42     	; 0x66e <TIMER0_start+0x60>
 644:	61 15       	cp	r22, r1
 646:	74 40       	sbci	r23, 0x04	; 4
 648:	81 05       	cpc	r24, r1
 64a:	91 05       	cpc	r25, r1
 64c:	a1 f0       	breq	.+40     	; 0x676 <TIMER0_start+0x68>
 64e:	0b c0       	rjmp	.+22     	; 0x666 <TIMER0_start+0x58>
    {
	    case 1:
	    TCCR0 |= (1 << 0); // set pin0
 650:	83 b7       	in	r24, 0x33	; 51
 652:	81 60       	ori	r24, 0x01	; 1
 654:	83 bf       	out	0x33, r24	; 51
	    break;
 656:	07 c0       	rjmp	.+14     	; 0x666 <TIMER0_start+0x58>
	    case 8:
	    TCCR0 |= (1 << 1); // set pin1
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	83 bf       	out	0x33, r24	; 51
	    break;
 65e:	03 c0       	rjmp	.+6      	; 0x666 <TIMER0_start+0x58>
	    case 64:
	    TCCR0 |= 3; // set pin0 and pin1
 660:	83 b7       	in	r24, 0x33	; 51
 662:	83 60       	ori	r24, 0x03	; 3
 664:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00; //set timer 0
}


void TIMER0_start(uint32_t preScalar,uint32_t number_of_overflow)
{
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	50 e0       	ldi	r21, 0x00	; 0
 66a:	ba 01       	movw	r22, r20
 66c:	12 c0       	rjmp	.+36     	; 0x692 <TIMER0_start+0x84>
	    break;
	    case 64:
	    TCCR0 |= 3; // set pin0 and pin1
	    break;
	    case 256:
	    TCCR0 |= (1 << 2); // set pin2
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	84 60       	ori	r24, 0x04	; 4
 672:	83 bf       	out	0x33, r24	; 51
	    break;
 674:	f8 cf       	rjmp	.-16     	; 0x666 <TIMER0_start+0x58>
	    case 1024:
	    TCCR0 |= 5; // set pin0 and pin2
 676:	83 b7       	in	r24, 0x33	; 51
 678:	85 60       	ori	r24, 0x05	; 5
 67a:	83 bf       	out	0x33, r24	; 51
	    break;
 67c:	f4 cf       	rjmp	.-24     	; 0x666 <TIMER0_start+0x58>
    }
    // Repeated number of overflow times
    while (overflowCounter < number_of_overflow)
    {
	    // wait the overflow flat to be set
	    while ((TIFR & (1 << 0)) == 0);
 67e:	08 b6       	in	r0, 0x38	; 56
 680:	00 fe       	sbrs	r0, 0
 682:	fd cf       	rjmp	.-6      	; 0x67e <TIMER0_start+0x70>
	    // Clear the overflow flag
	    TIFR |= (1 << 0);
 684:	88 b7       	in	r24, 0x38	; 56
 686:	81 60       	ori	r24, 0x01	; 1
 688:	88 bf       	out	0x38, r24	; 56
	    overflowCounter++;
 68a:	4f 5f       	subi	r20, 0xFF	; 255
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	6f 4f       	sbci	r22, 0xFF	; 255
 690:	7f 4f       	sbci	r23, 0xFF	; 255
	    default:
	    // Error handling
	    break;
    }
    // Repeated number of overflow times
    while (overflowCounter < number_of_overflow)
 692:	40 17       	cp	r20, r16
 694:	51 07       	cpc	r21, r17
 696:	62 07       	cpc	r22, r18
 698:	73 07       	cpc	r23, r19
 69a:	88 f3       	brcs	.-30     	; 0x67e <TIMER0_start+0x70>
	    // Clear the overflow flag
	    TIFR |= (1 << 0);
	    overflowCounter++;
    }
	
}
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <Timer_stop>:

void Timer_stop()
{
	TCCR0 = 0x00;
 6a2:	13 be       	out	0x33, r1	; 51
 6a4:	08 95       	ret

000006a6 <delay_5s>:
	Timer_stop();
}*/

void delay_5s(void)
{
	TIMER0_start(256, 77);
 6a6:	2d e4       	ldi	r18, 0x4D	; 77
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	71 e0       	ldi	r23, 0x01	; 1
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 07 03 	call	0x60e	; 0x60e <TIMER0_start>
	Timer_stop();
 6ba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Timer_stop>
 6be:	08 95       	ret

000006c0 <__udivmodsi4>:
 6c0:	a1 e2       	ldi	r26, 0x21	; 33
 6c2:	1a 2e       	mov	r1, r26
 6c4:	aa 1b       	sub	r26, r26
 6c6:	bb 1b       	sub	r27, r27
 6c8:	fd 01       	movw	r30, r26
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <__udivmodsi4_ep>

000006cc <__udivmodsi4_loop>:
 6cc:	aa 1f       	adc	r26, r26
 6ce:	bb 1f       	adc	r27, r27
 6d0:	ee 1f       	adc	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	a2 17       	cp	r26, r18
 6d6:	b3 07       	cpc	r27, r19
 6d8:	e4 07       	cpc	r30, r20
 6da:	f5 07       	cpc	r31, r21
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__udivmodsi4_ep>
 6de:	a2 1b       	sub	r26, r18
 6e0:	b3 0b       	sbc	r27, r19
 6e2:	e4 0b       	sbc	r30, r20
 6e4:	f5 0b       	sbc	r31, r21

000006e6 <__udivmodsi4_ep>:
 6e6:	66 1f       	adc	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	1a 94       	dec	r1
 6f0:	69 f7       	brne	.-38     	; 0x6cc <__udivmodsi4_loop>
 6f2:	60 95       	com	r22
 6f4:	70 95       	com	r23
 6f6:	80 95       	com	r24
 6f8:	90 95       	com	r25
 6fa:	9b 01       	movw	r18, r22
 6fc:	ac 01       	movw	r20, r24
 6fe:	bd 01       	movw	r22, r26
 700:	cf 01       	movw	r24, r30
 702:	08 95       	ret

00000704 <_exit>:
 704:	f8 94       	cli

00000706 <__stop_program>:
 706:	ff cf       	rjmp	.-2      	; 0x706 <__stop_program>
